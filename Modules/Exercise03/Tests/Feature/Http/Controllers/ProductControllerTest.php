<?php

namespace Modules\Exercise03\Tests\Feature\Http\Controllers;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Modules\Exercise03\Http\Controllers\ProductController;
use Modules\Exercise03\Models\Product;
use Modules\Exercise03\Services\ProductService;
use Tests\TestCase;

class ProductControllerTest extends TestCase
{
    use DatabaseTransactions;
    protected $productService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->productService = \Mockery::mock(ProductService::class);
    }

    public function testIndex()
    {
        $products = Product::factory()->cravat()->count(3)->create();
        $this->productService->shouldReceive('getAllProducts')
            ->andReturn($products);
        $response = $this->get(action([ProductController::class, 'index']));
        $response->assertSuccessful();
        $response->assertViewIs('exercise03::index');
    }

    /**
     * @param array $inputs Request data
     *
     * @dataProvider providerDataValidateDateFailed
     */
    public function testCheckoutRequest($inputs)
    {
        $response = $this->post(action([ProductController::class, 'checkout'], $inputs));
        $response->assertStatus(302)
            ->assertSessionHas('errors');
    }

    public function providerDataValidateDateFailed()
    {
        return [
            [['total_products' => [-1, 'text']]],
            [['total_products' => '']],
            [['total_products' => '121']],
            [['total_products' => ['dasdad']]],
        ];
    }

    /**
     * @param array $params Request data
     *
      * @param $result
     *
     * @dataProvider providerDataCheckout
     */
    public function testCheckout($params, $result)
    {
        $response = $this->post(action([ProductController::class, 'checkout'], ['total_products' => $params]));
        $this->assertEquals($result, $response['discount']);
    }

    public function providerDataCheckout()
    {
        return [
            [[1 => 1, 2 => 2, 3 => 0], 5],
            [[1 => 1, 2 => 2, 3 => 3], 5],
            [[1 => 3, 2 => 3, 3 => 3], 12],
        ];
    }
}
