<?php

namespace Modules\Exercise03\Tests\Unit\Services;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Modules\Exercise03\Models\Product;
use Modules\Exercise03\Services\ProductService;
use Tests\TestCase;

class ProductServiceTest extends TestCase
{
    use DatabaseTransactions;

    protected $productService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->productService = app()->make(ProductService::class);

    }

    public function testGetAllProducts()
    {
        $products = Product::factory()->cravat()->count(3)->create();
        $response = $this->productService->getAllProducts();
        $this->assertEquals($products->toArray(), $response->toArray());
    }

    /**
     * @param array $params
     *
     * @param $result
     *
     * @dataProvider providerCalculateDiscountNotException
     */

    public function testCalculateDiscountNotException($params, $result)
    {
        $response = $this->productService->calculateDiscount($params);
        $this->assertEquals($result, $response);
    }

    public function providerCalculateDiscountNotException()
    {
        return [
            [[1 => 1, 2 => 2, 3 => 0], 5],
            [[1 => 1, 2 => 2, 3 => 3], 5],
            [[1 => 3, 2 => 3, 3 => 3], 12],
        ];
    }

    /**
     * @param array $params
     *
     * @dataProvider providerCalculateDiscountException
     */
    public function testCalculateDiscountException($params)
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->productService->calculateDiscount($params);
    }

    public function providerCalculateDiscountException()
    {
        return [
            [[1 => -1, 2 => 2, 3 => 0]],
            [[1 => 1, 2 => -2, 3 => 0]],
            [[1 => 1, 2 => 2, 3 => -3]],
        ];
    }
}
